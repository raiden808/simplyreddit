{"version":3,"sources":["controls/pagination.js","api/Api.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","nextPage","alert","react_default","a","createElement","href","onClick","this","Component","Api","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","items","_this2","fetch","then","res","json","result","setState","data","children","_this$state","console","log","length","display_posts","map","item","keyData","name","title","pagination","App","className","api_Api","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4LAmBeA,6MAfdC,SAAW,WACVC,MAAM,iFAIN,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,IAAIC,QAASC,KAAKP,UAA1B,qBATqBQ,aC4DVC,cA1DZ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAL,KAAAE,IAClBE,EAAAC,OAAAE,EAAA,EAAAF,CAAAL,KAAAK,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAT,KAAMG,KACDO,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,IALST,mFAaA,IAAAU,EAAAd,KACpBe,MAAM,8DACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACG,GACCL,EAAKM,SAAS,CACZR,UAAU,EACVC,MAAOM,EAAOE,KAAKC,YAMvB,SAACX,GACCG,EAAKM,SAAS,CACZR,UAAU,EACVD,6CAMC,IAAAY,EAC4BvB,KAAKU,MAAfG,GADlBU,EACCZ,MADDY,EACQX,SADRW,EACkBV,OAEzBW,QAAQC,IAAIZ,GACZW,QAAQC,IAAIZ,EAAMa,OAAO,GAEzB,IAAMC,EAAgBd,EAAMe,IAC1B,SAAAC,GACE,OACElC,EAAAC,EAAAC,cAAA,MAAIiC,QAASD,EAAKR,KAAKU,MAAQF,EAAKR,KAAKW,SAK/C,OACErC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAK8B,GACLhC,EAAAC,EAAAC,cAACoC,EAAD,cArDUhC,aCWHiC,mLARV,OACFvC,EAAAC,EAAAC,cAAA,OAAKsC,UAAU,aACdxC,EAAAC,EAAAC,cAACuC,EAAD,cALcnC,mBCSEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.dff7e969.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\nclass Pagination extends Component{\r\n\r\n\tnextPage = () =>{\r\n\t\talert(\"test\");\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<a href='#' onClick={this.nextPage}>\r\n\t\t\t\t\tLoad Next\r\n\t\t\t    </a>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Pagination","import React, { Component } from 'react'\r\nimport Pagination from '../controls/pagination'\r\n\r\nclass Api extends Component {\r\n   constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: []\r\n    };\r\n  }\r\n\r\n  //http://www.reddit.com/r/nosleep/hot.json?count=5&after=t3_bwojax\r\n  //after = last thread marker\r\n  //count = the number of items already seen in this listing\r\n\r\n  componentDidMount() {\r\n  fetch(\"https://www.reddit.com/r/nosleep/hot.json?limit=10&count=5\")\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          items: result.data.children\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, items } = this.state;\r\n\r\n    console.log(items);\r\n    console.log(items.length-1)\r\n\r\n    const display_posts = items.map(\r\n      item =>{\r\n        return(\r\n          <li keyData={item.data.name} >{item.data.title}</li>\r\n        )\r\n      }\r\n    );\r\n   \r\n    return (\r\n      <div>\r\n        <ul>{display_posts}</ul>\r\n        <Pagination />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Api","import React, { Component } from 'react'\r\nimport Api from './api/Api'\r\n\r\nclass App extends Component {\r\n\r\n   \trender() {\r\n   \t\treturn(\r\n\t\t\t<div className='container'>\r\n\t\t\t\t<Api />\r\n\t    \t</div>\r\n   \t\t)\r\n  \t}\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}