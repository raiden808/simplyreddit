{"version":3,"sources":["components/Listing.js","components/Pagination.js","components/Search.js","components/ChangeSubreddit.js","components/Menu.js","components/SavedThreads.js","components/SaveThread.js","App.js","serviceWorker.js","index.js"],"names":["Listing","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayThread","e","index","target","getAttribute","subredditData","subreddit","data","children","threadText","selftext_html","convert","map_convert","toString","specThreadChange","CurrentActiveThreadObject","activeThreadObject","displayUI","threadData","threadId","id","threadTitle","title","threadUrl","url","threadDetails","push","escapedHTML","replace","bind","assertThisInitialized","_this2","map","_ref","react_default","a","createElement","key","href","data-index","className","name","onClick","React","Component","Pagination","nextPage","Search","handleInputValue","inputText","value","setState","handlePressEnter","searchSub","state","addSub","handleClick","onChange","ChangeSubreddit","handleButtonPress","handleButtonRelease","buttonPressTimer","setTimeout","removeSub","clearTimeout","_this3","displaySubs","item","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","onMouseLeave","Menu","handleToggle","document","querySelector","classList","toggle","contains","remove","add","currentTarget","ReturnThreads","handleReturnThread","SavedThreads","handleThreadClick","targetUrl","dataset","fetchSavedThread","renderSelfText","textHtml","asyncToGenerator","regenerator_default","mark","_callee","threadResponse","returnedData","wrap","_context","prev","next","fetch","concat","sent","ok","abrupt","json","renderText","toConsumableArray","t0","stop","_x","apply","arguments","removeSaveThread","subredditPosts","saveThread","savedThread","renderLayout","length","threadObject","data-url","dangerouslySetInnerHTML","__html","SavedThreads_ReturnThreads","SaveThread","preventDefault","singleThreadDetails","btnClass","btnText","ReturnListing","returnListing","App","fetchPosts","redditAPIResponse","_args","undefined","handleFetchError","statusText","err","alert","savedSub","sub","nextPageConstant","after","currentSub","thread","singleThread","menuStatus","newSub","localStorage","setItem","JSON","stringify","filter","i","getSavedThread","parse","getItem","objectSpread","valueToRemove","filteredItems","console","log","status","defaultSubreddit","getSavedSub","components_Listing","components_Pagination","components_Search","components_ChangeSubreddit","App_ReturnListing","components_SaveThread","components_SavedThreads","Helmet","components_Menu","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9498f407.chunk.js","sourcesContent":["import React from \"react\";\r\nclass Listing extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\r\n\t    this.displayThread = this.displayThread.bind(this);\r\n\t}\r\n\r\n\tdisplayThread = (e) =>{\r\n\r\n\t\tconst index = e.target.getAttribute('data-index');\r\n\t\tconst subredditData = this.props.subreddit.data.children; \r\n\r\n\t\t//convert and render text of subreddit\r\n\t\tconst threadText = subredditData[index].data.selftext_html;\r\n\t\tconst convert = this.map_convert(threadText.toString());\r\n\t\tthis.props.specThreadChange(convert);\r\n\r\n\t\t// multi dimensional array title and URL\r\n\t\tthis.props.CurrentActiveThreadObject(this.activeThreadObject(subredditData[index].data));\r\n\r\n\t\t//console.log(subredditData[index].data);\r\n\r\n\t\t// update the menu status\r\n\t\tthis.props.displayUI(\"threadView\");\r\n\t}\r\n\r\n\tactiveThreadObject = (threadData) =>{\r\n\t\t//Returns title and URL\r\n\t\tconst threadId    = threadData.id;\r\n\t\tconst threadTitle = threadData.title;\r\n\t\tconst threadUrl   = threadData.url;\r\n\r\n\t\tlet threadDetails = [];\r\n\r\n\t\tthreadDetails.push(threadId);\r\n\t\tthreadDetails.push(threadTitle);\r\n\t\tthreadDetails.push(threadUrl);\r\n\r\n\t\treturn threadDetails;\r\n\t}\r\n\r\n\t//converts string html tags into readable text\r\n\tmap_convert = (escapedHTML) => {\r\n\t  return escapedHTML.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst subredditData = this.props.subreddit.data.children;\r\n\t\tconst subredditPosts = subredditData.map(({ data }, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<li key={index}>\r\n\t\t\t\t\t<a href=\"#\" data-index={index} className={data.name} onClick={this.displayThread}>\r\n\t\t\t\t\t\t{data.title}\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t});\r\n\t\treturn subredditPosts;\r\n\t}\r\n}\r\nexport default Listing;\r\n","import React from \"react\";\r\nconst Pagination = props => (\r\n\t<div className=\"pagination\">\r\n\t\t<a href=\"#!\" onClick={props.nextPage}>\r\n\t\t\tLoad Next\r\n\t\t</a>\r\n\t</div>\r\n\t\r\n);\r\nexport default Pagination;\r\n","import React from \"react\";\r\n\r\nclass Search extends React.Component{\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tinputText: \"\", //allows textbox state change\r\n\t\t};\r\n\r\n\t\tthis.handlePressEnter = this.handlePressEnter.bind(this)\r\n\t}\r\n\r\n\t//handles input text change\r\n\thandleInputValue = e => {\r\n\t\tconst inputText = e.target.value;\r\n\t\tthis.setState({\r\n\t\t\tinputText: inputText\r\n\t\t});\r\n\t};\r\n\r\n\thandlePressEnter = e => {\r\n\t\tconst inputText = e.target.value;\r\n\t\tif (e.key === \"Enter\") {\r\n\t\t\tthis.props.searchSub(this.state.inputText)\r\n\t\t\tthis.props.addSub(this.state.inputText)\r\n\r\n\t\t\t//clears text input\r\n\t\t\tthis.setState({\r\n\t\t      inputText: ''\r\n\t\t    });\r\n\t\t}\r\n\t};\r\n\r\n\thandleClick = () =>{\r\n\t\tthis.props.searchSub(this.state.inputText)\r\n\t\tthis.props.addSub(this.state.inputText)\r\n\r\n\t\t//clears text input\r\n\t\tthis.setState({\r\n\t      inputText: ''\r\n\t    });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"searchArea\">\r\n\t\t\t\t<h4 className=\"title\">Search a Subreddit</h4>\r\n\t\t\t\t<div className=\"searchField\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tvalue={this.state.inputText}\r\n\t\t\t\t\t\tonChange={this.handleInputValue}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button className=\"smpl_btn\" onClick={this.handleClick}>Find</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\n\r\nclass ChangeSubreddit extends React.Component{\r\n\tconstructor() {\r\n    \tsuper()\r\n    \t//this binding enables access to state and other params\r\n\t    this.handleButtonPress = this.handleButtonPress.bind(this)\r\n\t\tthis.handleButtonRelease = this.handleButtonRelease.bind(this)\r\n\t}\r\n\r\n\t//set long press function \r\n\thandleButtonPress (subreddit) {\r\n    \tthis.buttonPressTimer = setTimeout(() => this.props.removeSub(subreddit), 1500);\r\n\t}\r\n\r\n\thandleButtonRelease (subreddit) {\r\n\t\tclearTimeout(this.buttonPressTimer);\r\n\t}\r\n\r\n\t//saved subreddits render\r\n\trender(){\r\n\t\tconst subredditData = this.props.displaySubs;\r\n\t\treturn(\r\n\t\t\t<div className='bookmark_subs'>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{subredditData.map(item => (\r\n\t            \t\t<li key={item}>\r\n\t            \t\t\t<button\r\n\t            \t\t\t\tonClick={() => { this.props.searchSub(item)}}\r\n\r\n\t            \t\t\t\tonTouchStart={ () => { this.handleButtonPress(item)}} \r\n\t\t\t\t\t\t        onTouchEnd={ () => { this.handleButtonRelease(item)}} \r\n\t\t\t\t\t\t        onMouseDown={ () => { this.handleButtonPress(item)}} \r\n\t\t\t\t\t\t        onMouseUp={ () => { this.handleButtonRelease(item)}} \r\n\t\t\t\t\t\t        onMouseLeave={ () => { this.handleButtonRelease(item)}}\r\n\t            \t\t\t>\r\n\t            \t\t\t\t{ \r\n\t            \t\t\t\t\t/*if state change to undefined*/\r\n\t            \t\t\t\t\t(typeof item !== 'undefined') ? \"r/\" + item : \"\"\r\n\t            \t\t\t\t}\r\n\t            \t\t\t</button>\r\n\t            \t\t</li>\r\n\t          \t\t))}\r\n          \t\t</ul>\r\n          \t\t<div className='subDesc'><small>Longpress to remove sub</small></div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ChangeSubreddit","import React from \"react\"\r\n\r\nclass Menu extends React.Component{\r\n\t\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t}\r\n\r\n\thandleToggle = () =>{\r\n\t\tdocument.querySelector('.toggle-slider').classList.toggle('closed');\r\n\t\t//arrow transition\r\n\t\tif ( document.querySelector(\".menu-toggle a .fa\").classList.contains('fa-angle-double-down') ){\r\n\t\t\tdocument.querySelector(\".menu-toggle a .fa\").classList.remove('fa-angle-double-down');\r\n\t\t\tdocument.querySelector(\".menu-toggle a .fa\").classList.add('fa-angle-double-up');\r\n\t\t}else{\r\n\t\t\tdocument.querySelector(\".menu-toggle a .fa\").classList.remove('fa-angle-double-up');\r\n\t\t\tdocument.querySelector(\".menu-toggle a .fa\").classList.add('fa-angle-double-down');\r\n\t\t}\r\n\t}\r\n\r\n\thandleClick = e => {\r\n\t\t//retrieve parent class !child\r\n\t\tlet target = e.currentTarget.className;\r\n\r\n\t\tthis.props.displayUI(target);\r\n\r\n\t\tthis.handleToggle();\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"menuContainer\">\r\n\t\t\t<div className=\"menu toggle-slider closed\">\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<a href=\"#\" onClick={this.handleClick} className=\"search\">\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<i className=\"fa fa-search\"></i>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a href=\"#\" onClick={this.handleClick} className=\"home\">\r\n\t\t\t\t\t\t<li>Home</li>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a href=\"#\" onClick={this.handleClick} className=\"subreddits\">\r\n\t\t\t\t\t\t<li>Your Subreddits</li>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a href=\"#\" onClick={this.handleClick} className=\"threads\">\r\n\t\t\t\t\t\t<li>Read Later</li>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"menu-toggle\">\r\n\t\t\t\t<a href=\"#\" onClick={()=>{this.handleToggle()}}><i className=\"fa fa-angle-double-down\"></i></a>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Menu;","import React from \"react\"\r\n\r\nconst ReturnThreads = props => {\r\n  \treturn(\r\n\t\t<a \r\n\t\t\thref=\"#\" \r\n\t\t\tclassName=\"smpl_btn read_btn\" \r\n\t\t\tonClick={props.handleReturnThread}\r\n\t\t>\r\n\t\t\tBack\r\n\t\t</a>\r\n\t)\r\n}\r\n\r\nclass SavedThreads extends React.Component {\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\trenderText : [], // thread content goes here\r\n\t\t};\r\n\t}\r\n\r\n\t// retrive url on click\r\n\thandleThreadClick = e =>{\r\n\r\n\t\tlet targetUrl =  e.target.dataset.url;\r\n\r\n\t\t// save thread to state\r\n\t\tthis.fetchSavedThread(targetUrl);\r\n\t}\r\n\r\n\t//properly convert html tags\r\n\trenderSelfText = (textHtml) =>{\r\n\t\treturn textHtml.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');\r\n\t}\r\n\r\n\tfetchSavedThread = async (url) =>{\r\n\t\ttry {\r\n\t\t\tconst threadResponse = await fetch(\r\n\t\t\t\t`${url}.json`\r\n\t\t\t);\r\n\r\n\t\t\tif (!threadResponse.ok){\r\n\t\t\t\treturn \"Thread can't be found!\";\r\n\t\t\t}\r\n\r\n\t\t\tconst returnedData = await threadResponse.json();\r\n\r\n\t\t\treturn this.setState(\r\n\t\t\t\t{ \r\n\t\t\t\t\trenderText: [...this.state.renderText,returnedData[0].data.children[0].data]\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\r\n\t\t} \r\n\r\n\t\tcatch (error) {\r\n\t\t\treturn \"Thread can't be found!\";\r\n\t\t}\r\n\t}\r\n\r\n\t// reset state\r\n\thandleReturnThread = () =>{\r\n\t\tthis.setState({ renderText:\"\"});\r\n\t}\r\n\r\n\t//handle button release on long press\r\n\thandleButtonPress (index) {\r\n    \tthis.buttonPressTimer = setTimeout(() => \r\n    \t\tthis.props.removeSaveThread(index)\r\n    \t, 1500);\r\n\t}\r\n\r\n\thandleButtonRelease (subreddit) {\r\n\t\tclearTimeout(this.buttonPressTimer);\r\n\t}\r\n\r\n\trender(){\r\n\t\t\r\n\t\tconst saveThread = this.props.savedThread;\r\n\t\tlet   renderLayout = \"\";\r\n\r\n\t\tlet subredditPosts;\r\n\r\n\t\tif (saveThread.length != 0){\r\n\t\t\tsubredditPosts = saveThread.map((key,index)  => {\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<li key={key.threadObject.id}>\r\n\t\t            \t<button \r\n\t\t            \t\tdata-url={key.threadObject.url}\r\n\t\t            \t\tonClick={this.handleThreadClick}\r\n\r\n\t\t            \t\tonTouchStart={ () => { this.handleButtonPress(index)}} \r\n\t\t\t\t\t        onTouchEnd={ () => { this.handleButtonRelease(index)}} \r\n\t\t\t\t\t        onMouseDown={ () => { this.handleButtonPress(index)}} \r\n\t\t\t\t\t        onMouseUp={ () => { this.handleButtonRelease(index)}} \r\n\t\t\t\t\t        onMouseLeave={ () => { this.handleButtonRelease(index)}}\r\n\t\t            \t>\r\n\t\t            \t\t{key.threadObject.title}\r\n\t\t            \t</button>\r\n\t\t            </li>\r\n\t\t\t\t)\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\telse{\r\n\t\t\tsubredditPosts  = \r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>No saved thread.</p>\r\n\t\t\t\t</div>\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\tif(this.state.renderText != \"\"){\r\n\t\t\trenderLayout = \r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className='activeSub'>\r\n\t\t\t        \t<h3>{this.state.renderText[0].title}</h3>\r\n\t\t\t        </div>\r\n\t\t\t\t\t<div \r\n\t\t\t\t\t\tdangerouslySetInnerHTML={{__html: this.renderSelfText(this.state.renderText[0].selftext_html)}}>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<ReturnThreads handleReturnThread={this.handleReturnThread} />\r\n\t\t\t\t</div>\r\n\t\t} else{\r\n\t\t\trenderLayout = \r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"activeSub\">\r\n\t\t\t\t\t\t<h3>\r\n\t\t\t\t\t\t\tSave threads\r\n\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='bookmark_subs'>\r\n\t\t\t\t\t\t<ul>\t\r\n\t\t\t\t\t\t\t{subredditPosts}\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t<div className='subDesc'><small>Longpress to remove thread.</small></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>;\r\n\t\t}\r\n\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{renderLayout}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default SavedThreads;","import React from \"react\";\r\n\r\nclass SaveThread extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\t\r\n\r\n\t\tthis.state = {\r\n\t\t\tsaveThread: \"no\"\r\n\t\t}\r\n\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t}\r\n\r\n\t// saves activeThreadURL \r\n\thandleClick = e => {\r\n\t\te.preventDefault();\r\n\t\t\r\n\t\t//save thread via props\r\n\t\tthis.props.SaveThread(this.props.singleThreadDetails);\r\n\r\n\t\tthis.setState({\r\n\t\t\tsaveThread:\"yes\"\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\tlet btnClass = (this.state.saveThread == \"yes\") ? \"smpl_btn simpl_btn_invert\" : \"smpl_btn read_btn\";\r\n\t\tlet btnText = (this.state.saveThread == \"yes\") ? \"Saved\" : \"Read Later\";\r\n\r\n\t\treturn(\r\n\t\t\t<a href=\"#\" onClick={this.handleClick} className={btnClass}>{btnText}</a>\r\n\t\t);\r\n\t}\r\n} \r\n\r\nexport default SaveThread;","import React from \"react\"\r\nimport Listing from \"./components/Listing\"\r\nimport Pagination from \"./components/Pagination\"\r\nimport Search from \"./components/Search\"\r\nimport {Helmet} from 'react-helmet'\r\nimport ChangeSubreddit from './components/ChangeSubreddit'\r\nimport Menu from './components/Menu'\r\nimport SavedThreads from './components/SavedThreads'\r\nimport SaveThread from './components/SaveThread'\r\n\r\n\r\nconst ReturnListing = props => {\r\n  return(\r\n    <a href=\"#\" className=\"smpl_btn read_btn\" onClick={props.returnListing} >Back</a>\r\n  )\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tsubreddit            : \"\", // data from API goes here\r\n\t\t\tsingleThread         : \"\", // thread content goes here\r\n\t\t\tcurrentSub           : \"TalesFromTechSupport\",// active sub\r\n\t\t\tsavedSub             : [], //bookmark subs\r\n\t\t\tmenuStatus           : \"home\",\r\n\t\t\tsavedThread          : [],\r\n\t\t\tsingleThreadDetails  : {},\r\n\t\t};\r\n\t}\r\n\r\n\t//initially load data\r\n\tcomponentDidMount() {\r\n\t\tconst defaultSubreddit = this.state.currentSub;\r\n\t\tthis.fetchPosts(defaultSubreddit);\r\n\r\n\t\tlet getSavedSub      = JSON.parse(localStorage.getItem('localSub'));\r\n\t\tlet getSavedThread   = JSON.parse(localStorage.getItem('savedThread'));\r\n\r\n\t\t//assign saved thread and sub on page load\r\n\t\tif(localStorage.getItem('localSub') === null){\r\n\t\t\tthis.setState({ \r\n\t\t\t\tsavedSub: [\"TalesFromTechSupport\",\"MaliciousCompliance\",\"IDontWorkHereLady\"]\r\n\t\t\t});\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.setState({ \r\n\t\t\t\tsavedSub: getSavedSub\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif(localStorage.getItem('localSub') !== null){\r\n\t\t\tthis.setState({ \r\n\t\t\t\tsavedThread:getSavedThread\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t* Subreddit Rending Area\r\n\t*/\r\n\tfetchPosts = async (subreddit, nextPage = \"\") => {\r\n\t\ttry {\r\n\t\t\t// fetch posts for the provided subreddit, then save them to the state\r\n\t\t\tconst redditAPIResponse = await fetch(\r\n\t\t\t\t`https://www.reddit.com/r/${subreddit}/hot.json?limit=10&count=5${nextPage}`\r\n\t\t\t);\r\n\t\t\tif (!redditAPIResponse.ok){\r\n\t\t\t\treturn this.handleFetchError(redditAPIResponse.statusText);\r\n\t\t\t}\r\n\t\t\tconst returnedData = await redditAPIResponse.json();\r\n\t\t\treturn this.setState({ subreddit: returnedData });\r\n\t\t} \r\n\r\n\t\tcatch (error) {\r\n\t\t\treturn this.handleFetchError(error);\r\n\t\t}\r\n\r\n\t};\r\n\r\n\thandleFetchError = err => {\r\n\t\talert(\r\n\t\t\t\"An error ocurred. That subreddit probably doesn't exist. Reverting to r/TalesFromTechSupport\"\r\n\t\t);\r\n\t\tthis.searchSub(\"TalesFromTechSupport\"); // after error, we go back to default sub\r\n\r\n\t\t//remove not working sub\r\n\t\tlet savedSub  = this.state.savedSub\r\n\t\tthis.setState({\r\n\t\t      savedSub: this.state.savedSub.map((sub, index) => {\r\n\t\t        if (savedSub.length-1 !== index) {\r\n\t\t            return sub // not the sub we are targeting, don't change it\r\n\t\t        }\r\n\t\t    })\r\n\t  \t})\r\n\r\n\t\t//force render of changes\r\n\t  \tthis.setState(this.state);\r\n\t};\r\n\t\r\n\r\n\t//navigation and individual thread rendering\r\n\tnextPage = () => {\r\n\t\t//last subreddit in the listing\r\n\t\tconst nextPageConstant = this.state.subreddit.data.after;\r\n\t\treturn this.fetchPosts(this.state.currentSub, `&after=${nextPageConstant}`);\r\n\t};\r\n\r\n\r\n\t/*\r\n\t* Thread Rendering area\r\n\t*/\r\n\tspecThreadChange = thread =>{\r\n\t\tthis.setState({ singleThread:thread})\r\n\t}\r\n\r\n\treturnListing = () =>{\r\n\t\tthis.setState({ singleThread:\"\"})\r\n\t\t//return home\r\n\t\tthis.setState({menuStatus:\"home\"});\r\n\t}\r\n\r\n\t/*\r\n\t* Sub Manipulation Area\r\n\t*/ \r\n\tsearchSub = (subreddit) =>{\r\n\t\tthis.setState({ currentSub:subreddit})\r\n\t\tthis.fetchPosts(subreddit);\r\n\t\t//return home\r\n\t  \tthis.setState({menuStatus:\"home\"});\r\n\t}\r\n\r\n\taddSub = subreddit => {\r\n\t\tthis.setState({ savedSub:[...this.state.savedSub,subreddit] })\r\n\r\n\t\tlet newSub = [...this.state.savedSub,subreddit]\r\n\t\t//update local storage\r\n\t\tlocalStorage.setItem(\"localSub\",JSON.stringify(newSub))\r\n\t}\r\n\r\n\t//removes sub on long press\r\n\tremoveSub = index => {\r\n\t\tconst savedSub  = this.state.savedSub\r\n\r\n\t  \tthis.setState({\r\n\t\t    savedSub: savedSub.filter((i) => {\r\n\t\t      \treturn i !== index\r\n\t\t    }),\r\n\t  \t})\r\n\r\n\t  \t//updates local storage\r\n\t  \tlocalStorage.setItem(\"localSub\",JSON.stringify(this.state.savedSub))\r\n\t}\r\n\r\n\t/*\r\n\t* Save Thread Area\r\n\t*/ \r\n\t// save current active thread id,title and url\r\n\t// save to local storage\r\n\tSaveThread = threadObject =>{\r\n\r\n\t\tlet getSavedThread   = JSON.parse(localStorage.getItem('savedThread'));\r\n\r\n\t\t// save thread object using spread\r\n\t\tgetSavedThread = [...getSavedThread,threadObject];\r\n\r\n\t\t//updates local storage\r\n\t \tlocalStorage.setItem(\"savedThread\",JSON.stringify(getSavedThread));\r\n\r\n\t\tthis.setState({ \r\n\t\t\tsavedThread:getSavedThread\r\n\t\t})\r\n\t}\r\n\r\n\t\r\n\t// store active thread into state\r\n\tCurrentActiveThreadObject = data =>{\r\n\r\n\t\tlet threadObject = new Object();\r\n\t\t\r\n\t\tthreadObject.id = data[0];\r\n\t\tthreadObject.title = data[1];\r\n\t\tthreadObject.url = data[2];\r\n\r\n\t\tthis.setState({ singleThreadDetails:{...this.state.singleThreadDetails,threadObject }})\r\n\r\n\t}\r\n\r\n\t//remove saved thread\r\n\tremoveSaveThread = index =>{\r\n\r\n\t\t// retrieves local storage\r\n\t\tlet getSavedThread   = JSON.parse(localStorage.getItem('savedThread'));\r\n\r\n\t\t// retrieves save thread state\r\n\t\tconst SaveThread = this.state.savedThread;\r\n\r\n\t\t// delete thread index on click\r\n\t\tconst valueToRemove = index;\r\n\t\tconst filteredItems = SaveThread.filter(function(item,key) {\r\n\t\t\t// remove array index via key\r\n\t\t\tconsole.log(key)\r\n\t\t  return key !== valueToRemove\r\n\t\t})\r\n\r\n\t\t//updates local storage\r\n\t \tlocalStorage.setItem(\"savedThread\",JSON.stringify(filteredItems));\r\n\r\n\t \tthis.setState({ \r\n\t\t\tsavedThread:filteredItems\r\n\t\t})\r\n\r\n\t}\r\n\r\n\t/*\r\n\t* Menu Page Rendering Area\r\n\t*/ \r\n\tdisplayUI = (status) =>{\r\n\t\tthis.setState({\r\n\t\t\tmenuStatus:status,\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\t// when data from Reddit successfully loads\r\n\t\tif (this.state.subreddit) {\r\n\r\n\t\t\tconst singleThreadStatus = this.state.singleThread === '';\r\n\t\t\tconst menuStatus = this.state.menuStatus;\r\n\r\n\t\t\tlet renderLayout;\r\n\r\n\r\n\t\t\t//TODO: \r\n\t\t\t// Display slug of thread and add .json on url end\r\n\t\t\t// Create new component to save sub\r\n\t\t\t// display url on console.log first\r\n\t\t\tswitch (menuStatus) {\r\n\t\t\t\tcase \"home\":\r\n\t\t\t\t\trenderLayout = \r\n\t\t\t\t\t\t<div>\r\n\t\t\t        \t\t<div className='activeSub'>\r\n\t\t\t        \t\t\t<h3>{\"r/\"+this.state.currentSub}</h3>\r\n\t\t\t        \t\t</div>\r\n\t\t\t        \t\t<ul className='listings'>\r\n\t\t\t\t\t\t\t\t<Listing \r\n\t\t\t\t\t\t\t\t\tsubreddit={this.state.subreddit} \r\n\t\t\t\t\t\t\t\t\tspecThreadChange={this.specThreadChange} \r\n\t\t\t\t\t\t\t\t\tdisplayUI={this.displayUI}\r\n\t\t\t\t\t\t\t\t\tCurrentActiveThreadObject={this.CurrentActiveThreadObject}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t<Pagination \r\n\t\t\t\t\t\t\t\tnextPage={this.nextPage} \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"search\":\r\n\t\t\t\t\trenderLayout = \r\n\t\t\t\t\t\t<Search \r\n\t\t\t\t        \tsearchSub={this.searchSub} \r\n\t\t\t\t        \taddSub={this.addSub} \r\n\t\t\t\t        />;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"subreddits\":\r\n\t\t\t\t\trenderLayout = \r\n\t\t\t\t\t\t<ChangeSubreddit  \r\n\t\t\t\t        \tsearchSub={this.searchSub} \r\n\t\t\t\t        \tdisplaySubs={this.state.savedSub}\r\n\t\t\t\t        \tremoveSub={this.removeSub}\r\n\t\t\t\t        />;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"threadView\":\r\n\t\t\t\t\trenderLayout = \r\n\t\t\t\t\t\t<div className=\"single_thread\">\r\n\t\t\t\t\t\t\t<div className='activeSub'>\r\n\t\t\t\t\t        \t<h3>{this.state.singleThreadDetails.threadObject.title}</h3>\r\n\t\t\t\t\t        </div>\r\n\t\t\t\t\t\t\t<div \r\n\t\t\t\t\t\t\t\tdangerouslySetInnerHTML={{__html: this.state.singleThread}}>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t{/*Set a current thread url here. add it like a state.*/}\r\n\t\t\t\t\t\t\t<ReturnListing  \r\n\t\t\t\t\t\t\t\treturnListing={this.returnListing} \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<SaveThread\r\n\t\t\t\t\t\t\t\tmenuStatus={menuStatus}\r\n\t\t\t\t\t\t\t\tSaveThread={this.SaveThread}\r\n\t\t\t\t\t\t\t\tsingleThreadDetails={this.state.singleThreadDetails}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"threads\":\r\n\t\t\t\t\trenderLayout = \r\n\t\t\t\t\t\t<SavedThreads  \r\n\t\t\t\t\t\t\tsavedThread={this.state.savedThread}\r\n\t\t\t\t\t\t\tremoveSaveThread={this.removeSaveThread}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<Helmet>\r\n\t\t\t        \t<title>SimplyReddit</title>\r\n\t\t\t      \t</Helmet>\r\n\t\t\t      \t<Menu displayUI={this.displayUI} />\r\n\t\t\t      \t{renderLayout}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t\t// if data hasn't loaded yet, don't put anything on the page\r\n\t\telse{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}