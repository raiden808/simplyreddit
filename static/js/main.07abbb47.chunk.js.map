{"version":3,"sources":["components/Listing.js","components/Pagination.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Listing","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayThread","e","index","target","getAttribute","threadText","subreddit","data","children","selftext_html","convert","map_convert","toString","specThreadChange","escapedHTML","replace","_this2","map","_ref","react_default","a","createElement","key","href","data-index","className","name","onClick","title","React","Component","Pagination","nextPage","Search","handleInputValue","inputText","value","setState","handlePressEnter","searchSub","state","onChange","onKeyDown","ReturnListing","returnListing","App","fetchPosts","asyncToGenerator","regenerator_default","mark","_callee","redditAPIResponse","returnedData","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","concat","sent","ok","abrupt","handleFetchError","statusText","json","t0","stop","_x","apply","nextPageConstant","after","currentSub","thread","singleThread","err","alert","defaultSubreddit","App_ReturnListing","dangerouslySetInnerHTML","__html","components_Search","components_Listing","components_Pagination","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAuCeA,cApCd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGVQ,cAAgB,SAACC,GAEhB,IAAMC,EAAQD,EAAEE,OAAOC,aAAa,cAE9BC,EADgBZ,EAAKD,MAAMc,UAAUC,KAAKC,SACfN,GAAOK,KAAKE,cAGvCC,EAAUjB,EAAKkB,YAAYN,EAAWO,YAE5CnB,EAAKD,MAAMqB,iBAAiBH,IAbVjB,EAiBnBkB,YAAc,SAACG,GACb,OAAOA,EAAYC,QAAQ,QAAQ,KAAKA,QAAQ,QAAQ,KAAKA,QAAQ,SAAS,MAlB7DtB,wEAqBV,IAAAuB,EAAApB,KAYR,OAXsBA,KAAKJ,MAAMc,UAAUC,KAAKC,SAEXS,IAAI,SAAAC,EAAWhB,GAAU,IAAlBK,EAAkBW,EAAlBX,KAC3C,OACCY,EAAAC,EAAAC,cAAA,MAAIC,IAAKpB,GACRiB,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAIC,aAAYtB,EAAOuB,UAAWlB,EAAKmB,KAAMC,QAASX,EAAKhB,eACjEO,EAAKqB,iBA9BUC,IAAMC,WCQbC,EARI,SAAAvC,GAAK,OACvB2B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cACdN,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAKI,QAASnC,EAAMwC,UAA5B,eCsCaC,cArCd,SAAAA,EAAYzC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IAClBxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,KAAMJ,KAOP0C,iBAAmB,SAAAjC,GAClB,IAAMkC,EAAYlC,EAAEE,OAAOiC,MAC3B3C,EAAK4C,SAAS,CACbF,UAAWA,KAXM1C,EAenB6C,iBAAmB,SAAArC,GACAA,EAAEE,OAAOiC,MACb,UAAVnC,EAAEqB,KACL7B,EAAKD,MAAM+C,UAAU9C,EAAK+C,MAAML,YAhBjC1C,EAAK+C,MAAQ,CACZL,UAAW,IAHM1C,wEAuBlB,OACC0B,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,SACCe,MAAOxC,KAAK4C,MAAML,UAClBM,SAAU7C,KAAKsC,iBACfQ,UAAW9C,KAAK0C,2BA/BAT,IAAMC,WCIrBa,EAAgB,SAAAnD,GACpB,OACE2B,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAII,QAASnC,EAAMoD,eAA3B,SAgGWC,cA1Fd,SAAAA,EAAYrD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiD,IAClBpD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmD,GAAA9C,KAAAH,KAAMJ,KAaPsD,WAdmB,eAAA5B,EAAAxB,OAAAqD,EAAA,EAAArD,CAAAsD,EAAA5B,EAAA6B,KAcN,SAAAC,EAAO5C,GAAP,IAAA0B,EAAAmB,EAAAC,EAAAC,EAAAC,UAAA,OAAAN,EAAA5B,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAkB1B,EAAlBqB,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAA6B,GAA7BG,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGqBG,MAAK,4BAAAC,OACRxD,EADQ,8BAAAwD,OAC8B9B,IAJxD,WAGLmB,EAHKK,EAAAO,MAMYC,GANZ,CAAAR,EAAAE,KAAA,eAAAF,EAAAS,OAAA,SAOHxE,EAAKyE,iBAAiBf,EAAkBgB,aAPrC,cAAAX,EAAAE,KAAA,EASgBP,EAAkBiB,OATlC,cASLhB,EATKI,EAAAO,KAAAP,EAAAS,OAAA,SAUJxE,EAAK4C,SAAS,CAAE/B,UAAW8C,KAVvB,eAAAI,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,SAAAA,EAAAS,OAAA,SAcJxE,EAAKyE,iBAALV,EAAAa,KAdI,yBAAAb,EAAAc,SAAApB,EAAA,kBAdM,gBAAAqB,GAAA,OAAArD,EAAAsD,MAAA5E,KAAA0D,YAAA,GAAA7D,EAgCnBuC,SAAW,WAGV,IAAMyC,EAAmBhF,EAAK+C,MAAMlC,UAAUC,KAAKmE,MACnD,OAAOjF,EAAKqD,WAAWrD,EAAK+C,MAAMmC,WAA3B,UAAAb,OAAiDW,KApCtChF,EAuCnBoB,iBAAmB,SAAA+D,GAClBnF,EAAK4C,SAAS,CAAEwC,aAAaD,KAxCXnF,EA2CnByE,iBAAmB,SAAAY,GAClBC,MACC,mFAEDtF,EAAK8C,UAAU,wBA/CG9C,EAkDnBmD,cAAgB,WACfnD,EAAK4C,SAAS,CAAEwC,aAAa,MAnDXpF,EAsDnB8C,UAAY,SAACjC,GACZb,EAAK4C,SAAS,CAAEsC,WAAWrE,IAC3Bb,EAAKqD,WAAWxC,IAtDhBb,EAAK+C,MAAQ,CACZlC,UAAW,GACXuE,aAAc,GACdF,WAAW,uBALMlF,mFAWlB,IAAMuF,EAAmBpF,KAAK4C,MAAMmC,WACpC/E,KAAKkD,WAAWkC,oCAkDhB,OAAIpF,KAAK4C,MAAMlC,UAEgB,IAA3BV,KAAK4C,MAAMqC,aAEZ1D,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACdN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACdN,EAAAC,EAAAC,cAAC4D,EAAD,CAAgBrC,cAAehD,KAAKgD,gBACnCzB,EAAAC,EAAAC,cAAA,OAAK6D,wBAAyB,CAACC,OAAQvF,KAAK4C,MAAMqC,gBACnD1D,EAAAC,EAAAC,cAAC4D,EAAD,CAAgBrC,cAAehD,KAAKgD,kBAQtCzB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACdN,EAAAC,EAAAC,cAAC+D,EAAD,CAAQ7C,UAAW3C,KAAK2C,YACxBpB,EAAAC,EAAAC,cAACgE,EAAD,CAAS/E,UAAWV,KAAK4C,MAAMlC,UAAWO,iBAAkBjB,KAAKiB,iBAAkBgE,aAAcjF,KAAK4C,MAAMqC,eAC5G1D,EAAAC,EAAAC,cAACiE,EAAD,CAAYtD,SAAUpC,KAAKoC,YAMxB,YAzFSH,IAAMC,iBCAJyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.07abbb47.chunk.js","sourcesContent":["import React from \"react\";\r\nclass Listing extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t}\r\n\r\n\tdisplayThread = (e) =>{\r\n\r\n\t\tconst index = e.target.getAttribute('data-index');\r\n\t\tconst subredditData = this.props.subreddit.data.children; \r\n\t\tconst threadText = subredditData[index].data.selftext_html;\r\n\r\n\t\t//converts string html tags\r\n\t\tconst convert = this.map_convert(threadText.toString());\r\n\r\n\t\tthis.props.specThreadChange(convert);\r\n\t}\r\n\r\n\r\n\tmap_convert = (escapedHTML) => {\r\n\t  return escapedHTML.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst subredditData = this.props.subreddit.data.children;\r\n\t\t//console.log(this.props.singleThread);\r\n\t\tconst subredditPosts = subredditData.map(({ data }, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<li key={index}>\r\n\t\t\t\t\t<a href=\"#\" data-index={index} className={data.name} onClick={this.displayThread}>\r\n\t\t\t\t\t\t{data.title}\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t});\r\n\t\treturn subredditPosts;\r\n\t}\r\n}\r\nexport default Listing;\r\n","import React from \"react\";\r\nconst Pagination = props => (\r\n\t<div className=\"pagination\">\r\n\t\t<a href=\"#!\" onClick={props.nextPage}>\r\n\t\t\tLoad Next\r\n\t\t</a>\r\n\t</div>\r\n\t\r\n);\r\nexport default Pagination;\r\n","import React from \"react\";\r\n\r\nclass Search extends React.Component{\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tinputText: \"\", // data from API goes here\r\n\t\t};\r\n\t}\r\n\r\n\t//handles input text change\r\n\thandleInputValue = e => {\r\n\t\tconst inputText = e.target.value;\r\n\t\tthis.setState({\r\n\t\t\tinputText: inputText\r\n\t\t});\r\n\t};\r\n\r\n\thandlePressEnter = e => {\r\n\t\tconst inputText = e.target.value;\r\n\t\tif (e.key === \"Enter\") {\r\n\t\t\tthis.props.searchSub(this.state.inputText)\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<p>Search a subreddit:</p>\r\n\t\t\t\t<input\r\n\t\t\t\t\tvalue={this.state.inputText}\r\n\t\t\t\t\tonChange={this.handleInputValue}\r\n\t\t\t\t\tonKeyDown={this.handlePressEnter}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport Listing from \"./components/Listing\";\r\nimport Pagination from \"./components/Pagination\";\r\nimport Search from \"./components/Search\"\r\n\r\n\r\nconst ReturnListing = props => {\r\n  return(\r\n    <a href=\"#\" onClick={props.returnListing} >Back</a>\r\n  )\r\n}\r\n\r\nclass App extends React.Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tsubreddit: \"\", // data from API goes here\r\n\t\t\tsingleThread: \"\",\r\n\t\t\tcurrentSub:\"UnresolvedMysteries\"\r\n\t\t};\r\n\t}\r\n\r\n\t//initially load data\r\n\tcomponentDidMount() {\r\n\t\tconst defaultSubreddit = this.state.currentSub;\r\n\t\tthis.fetchPosts(defaultSubreddit);\r\n\t}\r\n\tfetchPosts = async (subreddit, nextPage = \"\") => {\r\n\t\ttry {\r\n\t\t\t// fetch posts for the provided subreddit, then save them to the state\r\n\t\t\tconst redditAPIResponse = await fetch(\r\n\t\t\t\t`https://www.reddit.com/r/${subreddit}/hot.json?limit=10&count=5${nextPage}`\r\n\t\t\t);\r\n\t\t\tif (!redditAPIResponse.ok){\r\n\t\t\t\treturn this.handleFetchError(redditAPIResponse.statusText);\r\n\t\t\t}\r\n\t\t\tconst returnedData = await redditAPIResponse.json();\r\n\t\t\treturn this.setState({ subreddit: returnedData });\r\n\t\t} \r\n\r\n\t\tcatch (error) {\r\n\t\t\treturn this.handleFetchError(error);\r\n\t\t}\r\n\r\n\t};\r\n\tnextPage = () => {\r\n\t\t// this constant is the post after which the new posts are fetched,\r\n\t\t// the return function includes a parameter with the URI component with the next page constant\r\n\t\tconst nextPageConstant = this.state.subreddit.data.after;\r\n\t\treturn this.fetchPosts(this.state.currentSub, `&after=${nextPageConstant}`);\r\n\t};\r\n\r\n\tspecThreadChange = thread =>{\r\n\t\tthis.setState({ singleThread:thread})\r\n\t}\r\n\r\n\thandleFetchError = err => {\r\n\t\talert(\r\n\t\t\t\"An error ocurred. That subreddit probably doesn't exist. Reverting to r/popular\"\r\n\t\t);\r\n\t\tthis.searchSub(\"UnresolvedMysteries\"); // after error, we go back to default sub\r\n\t};\r\n\r\n\treturnListing = () =>{\r\n\t\tthis.setState({ singleThread:\"\"})\r\n\t}\r\n\r\n\tsearchSub = (subreddit) =>{\r\n\t\tthis.setState({ currentSub:subreddit})\r\n\t\tthis.fetchPosts(subreddit);\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\t// when data from Reddit successfully loads\r\n\t\tif (this.state.subreddit) {\r\n\r\n\t\t\tif(this.state.singleThread != \"\"){\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t<div className=\"single_thread\">\r\n\t\t\t\t\t\t\t<ReturnListing  returnListing={this.returnListing} />\r\n\t\t\t\t\t\t\t\t<div dangerouslySetInnerHTML={{__html: this.state.singleThread}}></div>\r\n\t\t\t\t\t\t\t<ReturnListing  returnListing={this.returnListing} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\telse{\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t<Search searchSub={this.searchSub} />\r\n\t\t\t\t\t\t<Listing subreddit={this.state.subreddit} specThreadChange={this.specThreadChange} singleThread={this.state.singleThread} />\r\n\t\t\t\t\t\t<Pagination nextPage={this.nextPage} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if data hasn't loaded yet, don't put anything on the page\r\n\t\treturn null;\r\n\t}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}