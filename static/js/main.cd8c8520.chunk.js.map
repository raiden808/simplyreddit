{"version":3,"sources":["components/Listing.js","App.js","serviceWorker.js","index.js"],"names":["Listing","subredditPosts","this","props","subreddit","data","children","map","_ref","index","react_default","a","createElement","key","title","Fragment","React","Component","App","state","fetchPosts","_callee","redditAPI","returnedData","regenerator_default","wrap","_context","prev","next","fetch","concat","sent","json","abrupt","_this","setState","stop","className","components_Listing","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAUeA,mLAPb,IACMC,EADgBC,KAAKC,MAAMC,UAAUC,KAAKC,SACXC,IAAI,SAAAC,EAAWC,GAAU,IAAlBJ,EAAkBG,EAAlBH,KAC3C,OAAOK,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAQJ,EAAKS,SAE9B,OAAOJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAI,SAAA,KAAGd,UANUe,IAAMC,WC6BbC,6MA1BXC,MAAQ,CACJf,UAAW,MAMfgB,iDAAa,SAAAC,EAAOjB,GAAP,IAAAkB,EAAAC,EAAA,OAAAC,EAAAb,EAAAc,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEeC,MAAK,4BAAAC,OAA6B1B,EAA7B,+BAFpB,cAEHkB,EAFGI,EAAAK,KAAAL,EAAAE,KAAA,EAGkBN,EAAUU,OAH5B,cAGHT,EAHGG,EAAAK,KAAAL,EAAAO,OAAA,SAIFC,EAAKC,SAAS,CAAE/B,UAAWmB,KAJzB,wBAAAG,EAAAU,SAAAf,+IAFTnB,KAAKkB,WAAW,4CAUhB,OAAIlB,KAAKiB,MAAMf,UAEPM,EAAAC,EAAAC,cAAA,MAAIyB,UAAU,aACb3B,EAAAC,EAAAC,cAAC0B,EAAD,CAASlC,UAAWF,KAAKiB,MAAMf,aAKjC,YAxBGY,IAAMC,iBCSJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cd8c8520.chunk.js","sourcesContent":["import React from \"react\";\r\nclass Listing extends React.Component {\r\n\trender() {\r\n\t\tconst subredditData = this.props.subreddit.data.children;\r\n\t\tconst subredditPosts = subredditData.map(({ data }, index) => {\r\n\t\t\treturn <li key={index}>{data.title}</li>;\r\n\t\t});\r\n\t\treturn <>{subredditPosts}</>;\r\n\t}\r\n}\r\nexport default Listing;\r\n","import React from 'react';\r\nimport Listing from './components/Listing';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        subreddit: ''\r\n    }\r\n    componentDidMount() {\r\n        // this is the default sub-reddit provided\r\n        this.fetchPosts('nosleep');\r\n    }\r\n    fetchPosts = async (subreddit) => {\r\n        // fetch posts for the provided subreddit, then save them to the state\r\n        const redditAPI = await fetch(`https://www.reddit.com/r/${subreddit}/hot.json?limit=10&count=5`);\r\n        const returnedData = await redditAPI.json();\r\n        return this.setState({ subreddit: returnedData });\r\n    }\r\n    render() {\r\n        // when data from Reddit successfully loads\r\n        if (this.state.subreddit) {\r\n            return (\r\n                <ul className='container'>\r\n                \t<Listing subreddit={this.state.subreddit} />\r\n        \t\t</ul>\r\n            )\r\n        }\r\n        // if data hasn't loaded yet, don't put anything on the page\r\n        return null;\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}