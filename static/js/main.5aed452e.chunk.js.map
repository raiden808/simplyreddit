{"version":3,"sources":["components/Listing.js","components/Pagination.js","components/Search.js","components/ChangeSubreddit.js","App.js","serviceWorker.js","index.js"],"names":["Listing","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayThread","e","index","target","getAttribute","threadText","subreddit","data","children","selftext_html","convert","map_convert","toString","specThreadChange","escapedHTML","replace","_this2","map","_ref","react_default","a","createElement","key","href","data-index","className","name","onClick","title","React","Component","Pagination","nextPage","Search","handleInputValue","inputText","value","setState","handlePressEnter","searchSub","state","addSub","bind","assertThisInitialized","class","onChange","onKeyDown","ChangeSubreddit","handleButtonPress","handleButtonRelease","buttonPressTimer","setTimeout","removeSub","clearTimeout","_this3","subredditData","displaySubs","item","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","onMouseLeave","ReturnListing","returnListing","App","fetchPosts","asyncToGenerator","regenerator_default","mark","_callee","redditAPIResponse","returnedData","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","concat","sent","ok","abrupt","handleFetchError","statusText","json","t0","stop","_x","apply","nextPageConstant","after","currentSub","thread","singleThread","err","alert","savedSub","sub","filter","i","localStorage","setItem","JSON","stringify","toConsumableArray","newSub","defaultSubreddit","retrievedObject","parse","getItem","singleThreadStatus","Helmet","components_Search","components_ChangeSubreddit","components_Listing","components_Pagination","App_ReturnListing","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAsCeA,cAnCd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGVQ,cAAgB,SAACC,GAEhB,IAAMC,EAAQD,EAAEE,OAAOC,aAAa,cAE9BC,EADgBZ,EAAKD,MAAMc,UAAUC,KAAKC,SACfN,GAAOK,KAAKE,cAGvCC,EAAUjB,EAAKkB,YAAYN,EAAWO,YAE5CnB,EAAKD,MAAMqB,iBAAiBH,IAbVjB,EAiBnBkB,YAAc,SAACG,GACb,OAAOA,EAAYC,QAAQ,QAAQ,KAAKA,QAAQ,QAAQ,KAAKA,QAAQ,SAAS,MAlB7DtB,wEAqBV,IAAAuB,EAAApB,KAWR,OAVsBA,KAAKJ,MAAMc,UAAUC,KAAKC,SACXS,IAAI,SAAAC,EAAWhB,GAAU,IAAlBK,EAAkBW,EAAlBX,KAC3C,OACCY,EAAAC,EAAAC,cAAA,MAAIC,IAAKpB,GACRiB,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAIC,aAAYtB,EAAOuB,UAAWlB,EAAKmB,KAAMC,QAASX,EAAKhB,eACjEO,EAAKqB,iBA7BUC,IAAMC,WCQbC,EARI,SAAAvC,GAAK,OACvB2B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cACdN,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAKI,QAASnC,EAAMwC,UAA5B,sBC8CaC,cA7Cd,SAAAA,EAAYzC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IAClBxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,KAAMJ,KASP0C,iBAAmB,SAAAjC,GAClB,IAAMkC,EAAYlC,EAAEE,OAAOiC,MAC3B3C,EAAK4C,SAAS,CACbF,UAAWA,KAbM1C,EAiBnB6C,iBAAmB,SAAArC,GACAA,EAAEE,OAAOiC,MACb,UAAVnC,EAAEqB,MACL7B,EAAKD,MAAM+C,UAAU9C,EAAK+C,MAAML,WAChC1C,EAAKD,MAAMiD,OAAOhD,EAAK+C,MAAML,WAG7B1C,EAAK4C,SAAS,CACTF,UAAW,OAvBjB1C,EAAK+C,MAAQ,CACZL,UAAW,IAGZ1C,EAAK6C,iBAAmB7C,EAAK6C,iBAAiBI,KAAtBhD,OAAAiD,EAAA,EAAAjD,CAAAD,IANNA,wEA+BlB,OACC0B,EAAAC,EAAAC,cAAA,OAAKuB,MAAM,UACVzB,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,SACCe,MAAOxC,KAAK4C,MAAML,UAClBU,SAAUjD,KAAKsC,iBACfY,UAAWlD,KAAK0C,2BAvCAT,IAAMC,mBC8CZiB,cA7Cd,SAAAA,IAAc,IAAAtD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmD,IACVtD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqD,GAAAhD,KAAAH,QAEKoD,kBAAoBvD,EAAKuD,kBAAkBN,KAAvBhD,OAAAiD,EAAA,EAAAjD,CAAAD,IAC5BA,EAAKwD,oBAAsBxD,EAAKwD,oBAAoBP,KAAzBhD,OAAAiD,EAAA,EAAAjD,CAAAD,IAJdA,iFAQKa,GAAW,IAAAU,EAAApB,KAC1BA,KAAKsD,iBAAmBC,WAAW,kBAAMnC,EAAKxB,MAAM4D,UAAU9C,IAAY,kDAGzDA,GACpB+C,aAAazD,KAAKsD,mDAIX,IAAAI,EAAA1D,KACD2D,EAAgB3D,KAAKJ,MAAMgE,YACjC,OACCrC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACb8B,EAActC,IAAI,SAAAwC,GAAI,OACbtC,EAAAC,EAAAC,cAAA,QAAMC,IAAKmC,GACVtC,EAAAC,EAAAC,cAAA,UACCM,QAAS,WAAQ2B,EAAK9D,MAAM+C,UAAUkB,IAEtCC,aAAe,WAAQJ,EAAKN,kBAAkBS,IACjDE,WAAa,WAAQL,EAAKL,oBAAoBQ,IAC9CG,YAAc,WAAQN,EAAKN,kBAAkBS,IAC7CI,UAAY,WAAQP,EAAKL,oBAAoBQ,IAC7CK,aAAe,WAAQR,EAAKL,oBAAoBQ,KAI3B,qBAATA,EAAwB,KAAOA,EAAO,OAKnDtC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WAAUN,EAAAC,EAAAC,cAAA,iDAxCPQ,IAAMC,WCM9BiC,EAAgB,SAAAvE,GACpB,OACE2B,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAII,QAASnC,EAAMwE,eAA3B,SAuLWC,cAjLd,SAAAA,EAAYzE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqE,IAClBxE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuE,GAAAlE,KAAAH,KAAMJ,KA6BP0E,WA9BmB,eAAAhD,EAAAxB,OAAAyE,EAAA,EAAAzE,CAAA0E,EAAAhD,EAAAiD,KA8BN,SAAAC,EAAOhE,GAAP,IAAA0B,EAAAuC,EAAAC,EAAAC,EAAAC,UAAA,OAAAN,EAAAhD,EAAAuD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAkB9C,EAAlByC,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAA6B,GAA7BG,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGqBG,MAAK,4BAAAC,OACR5E,EADQ,8BAAA4E,OAC8BlD,IAJxD,WAGLuC,EAHKK,EAAAO,MAMYC,GANZ,CAAAR,EAAAE,KAAA,eAAAF,EAAAS,OAAA,SAOH5F,EAAK6F,iBAAiBf,EAAkBgB,aAPrC,cAAAX,EAAAE,KAAA,EASgBP,EAAkBiB,OATlC,cASLhB,EATKI,EAAAO,KAAAP,EAAAS,OAAA,SAUJ5F,EAAK4C,SAAS,CAAE/B,UAAWkE,KAVvB,eAAAI,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,SAAAA,EAAAS,OAAA,SAcJ5F,EAAK6F,iBAALV,EAAAa,KAdI,yBAAAb,EAAAc,SAAApB,EAAA,kBA9BM,gBAAAqB,GAAA,OAAAzE,EAAA0E,MAAAhG,KAAA8E,YAAA,GAAAjF,EAiDnBuC,SAAW,WAGV,IAAM6D,EAAmBpG,EAAK+C,MAAMlC,UAAUC,KAAKuF,MACnD,OAAOrG,EAAKyE,WAAWzE,EAAK+C,MAAMuD,WAA3B,UAAAb,OAAiDW,KArDtCpG,EAyDnBoB,iBAAmB,SAAAmF,GAClBvG,EAAK4C,SAAS,CAAE4D,aAAaD,KA1DXvG,EA6DnB6F,iBAAmB,SAAAY,GAClBC,MACC,gGAED1G,EAAK8C,UAAU,wBAGf,IAAI6D,EAAY3G,EAAK+C,MAAM4D,SAC3B3G,EAAK4C,SAAS,CACR+D,SAAU3G,EAAK+C,MAAM4D,SAASnF,IAAI,SAACoF,EAAKnG,GACtC,GAAIkG,EAASrB,OAAO,IAAM7E,EACtB,OAAOmG,MAMjB5G,EAAK4C,SAAS5C,EAAK+C,QA9EH/C,EAkFnBuE,cAAgB,WACfvE,EAAK4C,SAAS,CAAE4D,aAAa,MAnFXxG,EAyFnB8C,UAAY,SAACjC,GACZb,EAAK4C,SAAS,CAAE0D,WAAWzF,IAC3Bb,EAAKyE,WAAW5D,IA3FEb,EA+FnB2D,UAAY,SAAAlD,GACX,IAAMkG,EAAY3G,EAAK+C,MAAM4D,SAE3B3G,EAAK4C,SAAS,CACZ+D,SAAUA,EAASE,OAAO,SAACC,GACxB,OAAOA,IAAMrG,MAKlBsG,aAAaC,QAAQ,WAAWC,KAAKC,UAAUlH,EAAK+C,MAAM4D,YAzG1C3G,EA4GnBgD,OAAS,SAAAnC,GACRb,EAAK4C,SAAS,CAAE+D,SAAQ,GAAAlB,OAAAxF,OAAAkH,EAAA,EAAAlH,CAAKD,EAAK+C,MAAM4D,UAAhB,CAAyB9F,MAEjD,IAAIuG,EAAM,GAAA3B,OAAAxF,OAAAkH,EAAA,EAAAlH,CAAOD,EAAK+C,MAAM4D,UAAlB,CAA2B9F,IAErCkG,aAAaC,QAAQ,WAAWC,KAAKC,UAAUE,KA/G/CpH,EAAK+C,MAAQ,CACZlC,UAAiB,GACjB2F,aAAiB,GACjBF,WAAiB,uBACjBK,SAAiB,IANA3G,mFAYlB,IAAMqH,EAAmBlH,KAAK4C,MAAMuD,WACpCnG,KAAKsE,WAAW4C,GAEhB,IAAIC,EAAkBL,KAAKM,MAAMR,aAAaS,QAAQ,aAGd,OAArCT,aAAaS,QAAQ,YACvBrH,KAAKyC,SAAS,CACb+D,SAAU,CAAC,uBAAuB,sBAAsB,uBAIzDxG,KAAKyC,SAAS,CACb+D,SAAUW,qCA8FZ,GAAInH,KAAK4C,MAAMlC,UAAW,CAGzB,IAAM4G,EAAiD,KAA5BtH,KAAK4C,MAAMyD,aAEtC,OACC9E,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACdN,EAAAC,EAAAC,cAAC8F,EAAA,OAAD,KACOhG,EAAAC,EAAAC,cAAA,8BAGA6F,EAEC/F,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAC+F,EAAD,CACC7E,UAAW3C,KAAK2C,UAChBE,OAAQ7C,KAAK6C,SAEdtB,EAAAC,EAAAC,cAACgG,EAAD,CACC9E,UAAW3C,KAAK2C,UAChBiB,YAAa5D,KAAK4C,MAAM4D,SACxBhD,UAAWxD,KAAKwD,YAEjBjC,EAAAC,EAAAC,cAAA,MAAII,UAAU,YACnBN,EAAAC,EAAAC,cAACiG,EAAD,CACChH,UAAWV,KAAK4C,MAAMlC,UACtBO,iBAAkBjB,KAAKiB,iBACvBoF,aAAcrG,KAAK4C,MAAMyD,gBAG3B9E,EAAAC,EAAAC,cAACkG,EAAD,CACCvF,SAAUpC,KAAKoC,YAIXb,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACpBN,EAAAC,EAAAC,cAACmG,EAAD,CACCxD,cAAepE,KAAKoE,gBAErB7C,EAAAC,EAAAC,cAAA,OACCoG,wBAAyB,CAACC,OAAQ9H,KAAK4C,MAAMyD,gBAE9C9E,EAAAC,EAAAC,cAACmG,EAAD,CACCxD,cAAepE,KAAKoE,kBAU1B,OAAO,YA9KQnC,IAAMC,iBCFJ6F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9G,EAAAC,EAAAC,cAAC6G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5aed452e.chunk.js","sourcesContent":["import React from \"react\";\r\nclass Listing extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t}\r\n\r\n\tdisplayThread = (e) =>{\r\n\r\n\t\tconst index = e.target.getAttribute('data-index');\r\n\t\tconst subredditData = this.props.subreddit.data.children; \r\n\t\tconst threadText = subredditData[index].data.selftext_html;\r\n\r\n\t\t//converts string html tags\r\n\t\tconst convert = this.map_convert(threadText.toString());\r\n\r\n\t\tthis.props.specThreadChange(convert);\r\n\t}\r\n\r\n\r\n\tmap_convert = (escapedHTML) => {\r\n\t  return escapedHTML.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst subredditData = this.props.subreddit.data.children;\r\n\t\tconst subredditPosts = subredditData.map(({ data }, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<li key={index}>\r\n\t\t\t\t\t<a href=\"#\" data-index={index} className={data.name} onClick={this.displayThread}>\r\n\t\t\t\t\t\t{data.title}\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t});\r\n\t\treturn subredditPosts;\r\n\t}\r\n}\r\nexport default Listing;\r\n","import React from \"react\";\r\nconst Pagination = props => (\r\n\t<div className=\"pagination\">\r\n\t\t<a href=\"#!\" onClick={props.nextPage}>\r\n\t\t\tLoad Next\r\n\t\t</a>\r\n\t</div>\r\n\t\r\n);\r\nexport default Pagination;\r\n","import React from \"react\";\r\n\r\nclass Search extends React.Component{\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tinputText: \"\", //allows textbox state change\r\n\t\t};\r\n\r\n\t\tthis.handlePressEnter = this.handlePressEnter.bind(this)\r\n\t}\r\n\r\n\t//handles input text change\r\n\thandleInputValue = e => {\r\n\t\tconst inputText = e.target.value;\r\n\t\tthis.setState({\r\n\t\t\tinputText: inputText\r\n\t\t});\r\n\t};\r\n\r\n\thandlePressEnter = e => {\r\n\t\tconst inputText = e.target.value;\r\n\t\tif (e.key === \"Enter\") {\r\n\t\t\tthis.props.searchSub(this.state.inputText)\r\n\t\t\tthis.props.addSub(this.state.inputText)\r\n\r\n\t\t\t//clears text input\r\n\t\t\tthis.setState({\r\n\t\t      inputText: ''\r\n\t\t    });\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div class=\"header\">\r\n\t\t\t\t<span>A text-based subreddit reader: </span>\r\n\t\t\t\t<input\r\n\t\t\t\t\tvalue={this.state.inputText}\r\n\t\t\t\t\tonChange={this.handleInputValue}\r\n\t\t\t\t\tonKeyDown={this.handlePressEnter}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\n\r\nclass ChangeSubreddit extends React.Component{\r\n\tconstructor() {\r\n    \tsuper()\r\n    \t//this binding enables access to state and other params\r\n\t    this.handleButtonPress = this.handleButtonPress.bind(this)\r\n\t\tthis.handleButtonRelease = this.handleButtonRelease.bind(this)\r\n\t}\r\n\r\n\t//set long press function \r\n\thandleButtonPress (subreddit) {\r\n    \tthis.buttonPressTimer = setTimeout(() => this.props.removeSub(subreddit), 1500);\r\n\t}\r\n\r\n\thandleButtonRelease (subreddit) {\r\n\t\tclearTimeout(this.buttonPressTimer);\r\n\t}\r\n\r\n\t//saved subreddits render\r\n\trender(){\r\n\t\tconst subredditData = this.props.displaySubs;\r\n\t\treturn(\r\n\t\t\t<div className='bookmark_subs'>\r\n\t\t\t\t{subredditData.map(item => (\r\n            \t\t<span key={item}>\r\n            \t\t\t<button\r\n            \t\t\t\tonClick={() => { this.props.searchSub(item)}}\r\n\r\n            \t\t\t\tonTouchStart={ () => { this.handleButtonPress(item)}} \r\n\t\t\t\t\t        onTouchEnd={ () => { this.handleButtonRelease(item)}} \r\n\t\t\t\t\t        onMouseDown={ () => { this.handleButtonPress(item)}} \r\n\t\t\t\t\t        onMouseUp={ () => { this.handleButtonRelease(item)}} \r\n\t\t\t\t\t        onMouseLeave={ () => { this.handleButtonRelease(item)}}\r\n            \t\t\t>\r\n            \t\t\t\t{ \r\n            \t\t\t\t\t/*if state change to undefined*/\r\n            \t\t\t\t\t(typeof item !== 'undefined') ? \"r/\" + item : \"\"\r\n            \t\t\t\t}\r\n            \t\t\t</button>\r\n            \t\t</span>\r\n          \t\t))}\r\n          \t\t<div className='subDesc'><small>Longpress to remove sub</small></div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ChangeSubreddit","import React from \"react\"\r\nimport Listing from \"./components/Listing\"\r\nimport Pagination from \"./components/Pagination\"\r\nimport Search from \"./components/Search\"\r\nimport {Helmet} from 'react-helmet'\r\nimport ChangeSubreddit from './components/ChangeSubreddit'\r\n\r\n\r\nconst ReturnListing = props => {\r\n  return(\r\n    <a href=\"#\" onClick={props.returnListing} >Back</a>\r\n  )\r\n}\r\n\r\nclass App extends React.Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tsubreddit    :   \"\",    // data from API goes here\r\n\t\t\tsingleThread :   \"\",    // thread content goes here\r\n\t\t\tcurrentSub   :   \"TalesFromTechSupport\",// active sub\r\n\t\t\tsavedSub     :   [] //bookmark subs\r\n\t\t};\r\n\t}\r\n\r\n\t//initially load data\r\n\tcomponentDidMount() {\r\n\t\tconst defaultSubreddit = this.state.currentSub;\r\n\t\tthis.fetchPosts(defaultSubreddit);\r\n\r\n\t\tlet retrievedObject = JSON.parse(localStorage.getItem('localSub'));\r\n\r\n\t\t//if no local storage\r\n\t\tif(localStorage.getItem('localSub') === null){\r\n\t\t\tthis.setState({ \r\n\t\t\t\tsavedSub: [\"TalesFromTechSupport\",\"MaliciousCompliance\",\"IDontWorkHereLady\"]\r\n\t\t\t});\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.setState({ \r\n\t\t\t\tsavedSub: retrievedObject\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tfetchPosts = async (subreddit, nextPage = \"\") => {\r\n\t\ttry {\r\n\t\t\t// fetch posts for the provided subreddit, then save them to the state\r\n\t\t\tconst redditAPIResponse = await fetch(\r\n\t\t\t\t`https://www.reddit.com/r/${subreddit}/hot.json?limit=10&count=5${nextPage}`\r\n\t\t\t);\r\n\t\t\tif (!redditAPIResponse.ok){\r\n\t\t\t\treturn this.handleFetchError(redditAPIResponse.statusText);\r\n\t\t\t}\r\n\t\t\tconst returnedData = await redditAPIResponse.json();\r\n\t\t\treturn this.setState({ subreddit: returnedData });\r\n\t\t} \r\n\r\n\t\tcatch (error) {\r\n\t\t\treturn this.handleFetchError(error);\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\tnextPage = () => {\r\n\t\t// this constant is the post after which the new posts are fetched,\r\n\t\t// the return function includes a parameter with the URI component with the next page constant\r\n\t\tconst nextPageConstant = this.state.subreddit.data.after;\r\n\t\treturn this.fetchPosts(this.state.currentSub, `&after=${nextPageConstant}`);\r\n\t};\r\n\r\n\t//render textContent on click of subreddit\r\n\tspecThreadChange = thread =>{\r\n\t\tthis.setState({ singleThread:thread})\r\n\t}\r\n\r\n\thandleFetchError = err => {\r\n\t\talert(\r\n\t\t\t\"An error ocurred. That subreddit probably doesn't exist. Reverting to r/TalesFromTechSupport\"\r\n\t\t);\r\n\t\tthis.searchSub(\"TalesFromTechSupport\"); // after error, we go back to default sub\r\n\r\n\t\t//remove not working sub\r\n\t\tlet savedSub  = this.state.savedSub\r\n\t\tthis.setState({\r\n\t\t      savedSub: this.state.savedSub.map((sub, index) => {\r\n\t\t        if (savedSub.length-1 !== index) {\r\n\t\t            return sub // not the sub we are targeting, don't change it\r\n\t\t        }\r\n\t\t    })\r\n\t  \t})\r\n\r\n\t\t//force render of changes\r\n\t  \tthis.setState(this.state);\r\n\t};\r\n\r\n\t//re render listing\r\n\treturnListing = () =>{\r\n\t\tthis.setState({ singleThread:\"\"})\r\n\t}\r\n\r\n\t/*\r\n\t* Subreddit Manipulations\r\n\t*/\r\n\tsearchSub = (subreddit) =>{\r\n\t\tthis.setState({ currentSub:subreddit})\r\n\t\tthis.fetchPosts(subreddit);\r\n\t}\r\n\r\n\t//removes sub on long press\r\n\tremoveSub = index => {\r\n\t\tconst savedSub  = this.state.savedSub\r\n\r\n\t  \tthis.setState({\r\n\t\t    savedSub: savedSub.filter((i) => {\r\n\t\t      \treturn i !== index\r\n\t\t    }),\r\n\t  \t})\r\n\r\n\t  \t//updates local storage\r\n\t  \tlocalStorage.setItem(\"localSub\",JSON.stringify(this.state.savedSub))\r\n\t}\r\n\r\n\taddSub = subreddit => {\r\n\t\tthis.setState({ savedSub:[...this.state.savedSub,subreddit] })\r\n\r\n\t\tlet newSub = [...this.state.savedSub,subreddit]\r\n\t\t//update local storage\r\n\t\tlocalStorage.setItem(\"localSub\",JSON.stringify(newSub))\r\n\t}\r\n\t\r\n\r\n\trender() {\r\n\t\t// when data from Reddit successfully loads\r\n\t\tif (this.state.subreddit) {\r\n\r\n\r\n\t\t\tconst singleThreadStatus = this.state.singleThread === '';\r\n\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<Helmet>\r\n\t\t\t        \t<title>SimplyReddit</title>\r\n\t\t\t      \t</Helmet>\r\n\r\n\t\t\t      \t{ singleThreadStatus\r\n\t\t\t\t        ? \t\r\n\t\t\t\t        \t<div>\r\n\t\t\t\t        \t\t<Search \r\n\t\t\t\t        \t\t\tsearchSub={this.searchSub} \r\n\t\t\t\t        \t\t\taddSub={this.addSub} \r\n\t\t\t\t        \t\t/>\r\n\t\t\t\t        \t\t<ChangeSubreddit  \r\n\t\t\t\t        \t\t\tsearchSub={this.searchSub} \r\n\t\t\t\t        \t\t\tdisplaySubs={this.state.savedSub}\r\n\t\t\t\t        \t\t\tremoveSub={this.removeSub}\r\n\t\t\t\t        \t\t/>\r\n\t\t\t\t        \t\t<ul className='listings'>\r\n\t\t\t\t\t\t\t\t\t<Listing \r\n\t\t\t\t\t\t\t\t\t\tsubreddit={this.state.subreddit} \r\n\t\t\t\t\t\t\t\t\t\tspecThreadChange={this.specThreadChange} \r\n\t\t\t\t\t\t\t\t\t\tsingleThread={this.state.singleThread} \r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t<Pagination \r\n\t\t\t\t\t\t\t\t\tnextPage={this.nextPage} \r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t        : \t\r\n\t\t\t\t        \t<div className=\"single_thread\">\r\n\t\t\t\t\t\t\t\t<ReturnListing  \r\n\t\t\t\t\t\t\t\t\treturnListing={this.returnListing} \r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<div \r\n\t\t\t\t\t\t\t\t\tdangerouslySetInnerHTML={{__html: this.state.singleThread}}>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<ReturnListing  \r\n\t\t\t\t\t\t\t\t\treturnListing={this.returnListing} \r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t    }\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\r\n\t\t}\r\n\t\t// if data hasn't loaded yet, don't put anything on the page\r\n\t\telse{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}